1. What is Unit Testing and why we need to do this?
Answer: Unit testing is testing individual unit (smallest testable part of your code) of code. eg. function, service, component
        We need to the unit testing because-
        1. Trust changes make on existing code.
        2. If we don't have unit testing in our code, we need to test it manually while making any changes
        3. To maintain the code quality and bug free
        4. Changes occurs quickly.
        5. Unit testing provides you the best documentation (Act as a documentation)

2. Testing Frameworks - Jasmine (Angular), Jest (ReactJS), mocha and many more....

3. Jasmine - Behaviour Driven Testing Framework

4. Testing file naming convention-
        testing file extension name-
          1. *.spec.js
          2. *.test.js
        Naming convention-
          1. (Target file name).spec.js
          2. (Target file name).test.js

5. Suites - A suites is a group of spec or tests. If you have lot of tests you will group them and that group is called suites.
          - It will organize the tests.

6. Spec file (*.spec.js) having -> Test Suites (Group of spec) having -> Spec or test cases (Group of expectations)

7. What is Expectations -> you can think of it as Assertions -> Assertions is just a statement -> Result of a statement either true or false

8. Passing or Failure Spec? When we can say that spec is passing or failure??
Ans: Passing Spec -> Spec with all the true expectations is a passing spec.
     Failure Spec -> Spec having one or more false expectations is a failure spec.

9. How to disable the Suite and Spec?
Ans. Disable Spec -> It's a spec that report as the pending spec and will not execute
     When to disable the spec -> 1. Doing some logic changes in the code 2. While TDD development
     Use below menthod to disable the suite and spec-
     1. xdescibe('Title', () => {}) // Disable Suite
     2. xit('Title', () => {}) // Disable Spec

10. What is Matchers and why we use matchers for expectations in Jasmine?
Ans: A matcher is just a function and this function implements the boolean comparison between the actual value and expected value.
     Matcher is responsible to report to jasmine if the expectation is true or false.
     Matcher deside whether the spec is passing or failure spec
    Example:
      1. toBe() -> Actual Value === Expected Value (under the hood)

12. Custom Matcher - It's root is a comparison function that takes actual value and expected value.
                   - Should return an Object with a compare function (that be called to check the expectation)
                   - The compare function must return result as object with a pass property that is a boolean result of the matcher.
                   const customMatcher = {
                    return {
                         compare: function(actual, expected) {
                              return  {
                                   Pass: true,
                                   Message: 'Some Message here'
                              }
                         }
                    }
                   }

13. How we can use Custom Matcher in the spec?
Ans: Register the custom matcher with jasmine.addMatchers(). Once it's registered with jasmine, it will be available on any expectation.

14. Setup and Teardown -
     - To organize the spec or test more 
     - Setup and Teardown is a part of suite life cycle

     SETUP - 
     - Setup is where you place prerequisites for your specs. It executes before specs are run
     - Jasmine offers two methods for setup - 
          - beforeEach -> executed before each spec in the suite in which it is called
          - beforeAll -> exceuted only once for all the specs in the suite
     
     TEARDOWN -
     - Teardown in the life cycle of our suite is used to clean up the steps for your specs.
     - It is called after all the specs have been exceuted
     - Jsmine offers two methods for Teardown
          - afterEach -> executed after each spec in the suite in which it is called
          - afterAll -> executes only once after all the specs in the suite 